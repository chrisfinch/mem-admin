AWSTemplateFormatVersion: 2010-09-09
Description: eventbriteImages
Parameters:
  VpcId:
    Type: String
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    Default: vpc-e6e00183
  Subnets:
    Type: CommaDelimitedList
    Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
    Default: 'subnet-cb91ae8d, subnet-a7b74ac2, subnet-179e8063'
  Stack:
    Description: 'Applied directly as a tag (''membership'', or ''memb-masterclasses'')'
    Type: String
    Default: membership
  App:
    Description: Applied directly as a tag
    Type: String
    Default: memb-eventbriteImages
  Stage:
    Description: Applied directly as a tag
    Type: String
    Default: PROD
  SslArn:
    Description: SSL certificate ARN
    Type: String
    Default: ''
  AllowedIngressIps:
    Description: >-
      IP address range (CIDR) that access the site (e.g. '77.91.248.0/21'-
      Internal Guardian, or '0.0.0.0/0' - the whole internet!)
    Type: String
    Default: 77.91.248.0/21
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.small
    AllowedValues:
      - t2.small
      - t3.micro
      - t3.small
    ConstraintDescription: must be a valid EC2 instance type.
  AMIID:
    Type: String
    Description: Amazon Machine Image ID
Resources:
  EventbriteImagesAutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AvailabilityZones: !GetAZs ''
      VPCZoneIdentifier: !Ref Subnets
      LaunchConfigurationName: !Ref EventbriteImagesLaunchConfig
      MinSize: '1'
      MaxSize: '2'
      DesiredCapacity: '1'
      LoadBalancerNames:
        - !Ref EventbriteImagesElasticLoadBalancer
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Stack
          Value: !Ref Stack
          PropagateAtLaunch: 'true'
        - Key: App
          Value: !Ref App
          PropagateAtLaunch: 'true'
        - Key: Stage
          Value: !Ref Stage
          PropagateAtLaunch: 'true'
  EventbriteImagesLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !Ref AMIID
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref MembershipAppInstanceProfile
      AssociatePublicIpAddress: true
      UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -ev

            # get runnable tar from S3
            aws --region ${AWS::Region} s3 cp s3://membership-dist/${Stack}/${Stage}/memb-eventbriteImages/memb-eventbriteImages.tgz /tmp
            mkdir -p /etc/gu/memb-eventbriteImages
            tar -xzf /tmp/memb-eventbriteImages.tgz -C /etc/gu/memb-eventbriteImages
            aws --region ${AWS::Region} s3 cp s3://gu-reader-revenue-private/${Stack}/${App}/${Stage}/eventbriteImages-config.json /etc/gu/memb-eventbriteImages

            # add user
            groupadd membership
            useradd -r -s /usr/bin/nologin -g membership memb-eventbriteImages
            chown -R memb-eventbriteImages:membership /etc/gu

            # set up logging
            touch /var/log/memb-eventbriteImages.log
            chown memb-eventbriteImages:membership /var/log/memb-eventbriteImages.log
            /opt/cloudwatch-logs/configure-logs application ${Stack} ${Stage} ${App} /var/log/memb-eventbriteImages.log

            # set up startup daemon
            cat >/etc/systemd/system/memb-eventbriteImages.service <<EOL
            [Service]
            ExecStart=/usr/bin/node /etc/gu/memb-eventbriteImages/bin/www
            Restart=always
            StandardOutput=syslog
            StandardError=syslog
            SyslogIdentifier=memb-eventbriteImages
            User=memb-eventbriteImages
            Group=membership
            Environment=NODE_ENV=production
            [Install]
            WantedBy=multi-user.target
            EOL

            # Start application
            systemctl enable memb-eventbriteImages
            systemctl start memb-eventbriteImages
  MembershipAppRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      ManagedPolicyArns:
        - !Sub arn:aws:iam::${AWS::AccountId}:policy/guardian-ec2-role-for-ssm
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: PrivateBucket
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: s3:GetObject
                Resource: !Sub arn:aws:s3:::gu-reader-revenue-private/${Stack}/${App}/${Stage}/*
        - PolicyName: PushLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt EventbriteImagesLogGroup.Arn
  MembershipAppInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref MembershipAppRole
  EventbriteImagesElasticLoadBalancer:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    Properties:
      Listeners:
        - LoadBalancerPort: '443'
          InstancePort: '3000'
          Protocol: HTTPS
          SSLCertificateId: !Ref SslArn
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets: !Ref Subnets
      HealthCheck:
        Target: 'HTTP:3000/healthcheck'
        HealthyThreshold: '2'
        UnhealthyThreshold: '2'
        Interval: '10'
        Timeout: '5'
      ConnectionDrainingPolicy:
        Enabled: 'true'
        Timeout: '60'
  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Permit incoming HTTP access on port 443, egress to port 3000'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Ref AllowedIngressIps
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '3000'
          ToPort: '3000'
          CidrIp: 0.0.0.0/0
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable inbound HTTP access on the configured port
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3000'
          ToPort: '3000'
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
  EventbriteImagesELBDNSrecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: /hostedzone/Z8SGOO5042FR9
      Comment: CNAME for AWS ELB
      Name: !Sub ${App}-${Stage}.membership-event-management.gutools.co.uk.
      Type: CNAME
      TTL: '120'
      ResourceRecords:
        - !GetAtt
          - EventbriteImagesElasticLoadBalancer
          - DNSName
  EventbriteImagesLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub ${Stack}-${App}-${Stage}
      RetentionInDays: 14
Outputs:
  URL:
    Description: URL of the EventbriteImages website
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - EventbriteImagesElasticLoadBalancer
          - DNSName
